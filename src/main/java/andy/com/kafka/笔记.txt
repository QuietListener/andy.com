
The Kafka cluster stores streams of records in categories called topics.
A topic is a category or feed name to which records are published.
Kafka存储record的逻辑单元是topic，可以理解为topic是一类record的名字



For each topic, the Kafka cluster maintains a partitioned log
Each partition is an ordered, immutable sequence of records that is continually appended to—a structured commit log.
The records in the partitions are each assigned a sequential id number called the offset that uniquely identifies
each record within the partition.
每一个topic可以分为多个partition,每个partition仲的record是顺序的，并且有一个sequential id 叫 offset


the only metadata retained on a per-consumer basis is the offset or position of that consumer in the log
在consumer中保存的东西只有partition或者partiion的offset。在consumer中保存offset，可以按任意顺序修改消费顺序。


The partitions of the log are distributed over the servers in the Kafka cluster with each server handling data
and requests for a share of the partitions. Each partition is replicated across a configurable number of servers
for fault tolerance.
Each partition has one server which acts as the "leader" and zero or more servers which act as "followers". The
leader handles all read and write requests for the partition while the followers passively replicate the leader.
If the leader fails, one of the followers will automatically become the new leader. Each server acts as a leader
 for some of its partitions and a follower for others so load is well balanced within the cluster.
partition可以配成分布式的，每一个partition可以有多个备份，这些partition中需要选一个leader，leader负责所有的读写请求，其他的follower
会热备，leader挂后自动选择。


The producer is responsible for choosing which record to assign to which partition within the topic.
生产者发布record的时候需要指定topic和它的partion


Consumers label themselves with a consumer group name, and each record published to a topic is delivered to one
consumer instance within each subscribing consumer group. Consumer instances can be in separate processes or on
separate machines.
consumer可以分组，每一个topic中的record会分发给组里的一个consumer实例。



Kafka only provides a total order over records within a partition, not between different partitions in a topic.
Per-partition ordering combined with the ability to partition data by key is sufficient for most applications.
However, if you require a total order over records this can be achieved with a topic that has only one partition,
though this will mean only one consumer process per consumer group.

卡夫卡只能在partition级别提供顺序消费，不能提供topic级别的消费。如果要提供topic级别的消费，只能在这个topic下面挂一个partition

