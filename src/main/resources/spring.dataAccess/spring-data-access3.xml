<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--看这部分 start-->
    <!-- 需要事务支持的service对象-->
    <bean id="fooService" class="andy.com.springFramework.dataAccess.annotationTransactionImplementation.FooService" />
    <!--看这部分 start-->
    <!-- 需要事务支持的service对象-->
    <bean id="foo1Service" class="andy.com.springFramework.dataAccess.annotationTransactionImplementation.Foo1Service">
        <property name="fooService" ref="fooService" />
    </bean>




    <!--
    如果用java配置需要
    @Configuration
    @EnableTransactionManagement
    public class AppConfig {

    @Bean
    public FooRepository fooRepository() {
    // configure and return a class having @Transactional methods
    return new JdbcFooRepository(dataSource());
    }

    @Bean
    public DataSource dataSource() {
    // configure and return the necessary JDBC DataSource
    }

    @Bean
    public PlatformTransactionManager txManager() {
    return new DataSourceTransactionManager(dataSource());
    }
    }
    -->

    <!--看这部分 end -->



    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:mybatis/spring/datasource.properties"/>
    </bean>


    <bean id="dataSource0" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${jdbc.mysql.url0}"/>
        <property name="username" value="${jdbc.mysql.username0}"/>
        <property name="password" value="${jdbc.mysql.password0}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>



    <!-- 开始注解事务 enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="txManager" mode="aspectj"/><!-- a PlatformTransactionManager is still required -->
    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!--事务-->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource0"></property>
    </bean>

    <aop:spring-configured />

    <bean id="annotationTransactionAspect" factory-method="aspectOf"  class="org.springframework.transaction.aspectj.AnnotationTransactionAspect">
        <property name="transactionManager" ref="txManager"></property>
    </bean>

</beans>